The Keep Network:
A Privacy Layer for Public Blockchains

Matt Luongo
mhluongo@gmail.com

Abstract

We introduce the keep, a new privacy
primitive for developing smart con-
tracts on public blockchains, enabling
secure storage and usage of secrets, as
well as supporting infrastructure, in-
cluding the keep market and token.

Our incremental approach to privacy
infrastructure can be brought to mar-

Corbin Pon
corbin. pon@gmail.com

Zcash [6], a cryptocurrency using zk-SNARKs

to ensure transaction pr
As early as December

ivacy.
2014, Vitalik Buterin,

one of the founders of Ethereum, explored

solving this problem wi
computation (sMPC) [7
ing, Buterin shares that
talk to companies abou

cations on a blockchain,

always come up: scalabi

h secure multi party
. In more recent writ-
“when [he] and others
building their appli-
two primary issues
lity and privacy” [8].

ket on the Ethereum public network, it-
erated on, and adapted for other public
blockchains and cross-blockchain use.

1 Motivation

1.1. The irony of public blockchains

Public blockchains have brought unprece-
dented transparency and auditability to finan-
cial technology. Records are immutable, veri-
fiable, and censorship-resistant.
Unfortunately, these strengths are also
weaknesses for many potential users.

For every use case a_ public
ylockchain enables, its public status restricts
another. Bitcoin is touted as a more private
payment method than
cial system, but those familiar with the tech-
nology know that while it may be censorship-
resistant, it’s certainly not private by de-
ault [1]. Developers introduced to Ethereum
quickly learn to adjust their expectations
2)- all contract state is published to the
plockchain, and can be easily read by compet-
ing interests.

These issues are recognized by developers of
he Bitcoin and Ethereum projects.

Confidential transactions [3] is an ongoing
effort to bring better privacy, and therefore
ungibility, to Bitcoin via sidechains [4]. The
Zerocash project [5] applied zero-knowledge
proofs to Bitcoin, leading to the creation of

financial

he traditional finan-

Draft: 518f7b5fa4 - November 27, 2018

Scalability of public blockchains is a hur-
dle to mainstream adoption. Some of the bes
minds in the cryptocurrency space [9] [10] [1
are working on multiple order-of-magnitude
improvements. Privacy, however, hasn’t gar-
nered the same attention, especially in smar
contracts.

Basic use cases of smart contracts, incluc
ing publishing secrets after certain criteria are
met, assessing borrower risk for a loan, anc
signing messages and transactions, are increc
ibly difficult on today’s public blockchains.

1.2 Existing approaches

In practice, developers have found a number of
ways to build decentralized applications that
use private data.

1.2.1. The hash-reveal pattern

A common pattern on public blockchains is to
keep private data with the application’s users.
Contracts can receive and manipulate hashes
of private data, more generally called commit-
ments [12], while users withold the original un-
il revealing the private data off-chain. We call
his the “hash-reveal” pattern.

For many applications, this approach is sat-
isfactory. There’s a clear privacy benefit over
ypical web applications- no centralized third-
arty database is at risk. Spreading storage
across many users means a distributed, diverse

arget for attackers.

There are significant downsides,
The hash-reveal pattern requires that all users
party to a transaction be online, monitoring
he system, providing private data when nec-
essary, and validating hashes against private
data provided by other users.

lowever.

This requirement makes the hash-reveal
pattern inflexible for complex protocols, and
unsuitable for systems that don’t revolve solely
around active human participants, like decen-

ralized autonomous organizations (DAOs).

1.2.2 Private blockchains

Another response to privacy restrictions, pri-
marily from the finance industry, has been to
build private blockchains, or so-called “per-
missioned ledgers” .

These systems operate in a trusted or semi-
trusted manner. Instead of using proof-of-
work or other consensus mechanisms designed
with an adversarial network in mind, they can
use systems like RAFT to reach consensus.

One such system, J.P. Morgan’s Quorum
[13], is a fork of Ethereum supporting pri-
vate contract state and messaging between
network participants. Another, Microsoft’s re-
cently announced Coco Framework [14], pro-
vides data privacy atop an existing private
blockchain.

These systems solve privacy at the ex-
pense of many of the benefits of a public
blockchain- trustlessness, public accountabil-
ity, censorship-resistance, and permissionless
innovation.

1.2.3. Zero-knowledge proofs

Zero-knowledge proofs have been leveraged to
maintain privacy on public blockchains- most
amously, by the Zcash [6] project.
Zero-knowledge proofs allow one party, the
prover, to prove a statement to another party,
he verifier, without revealing the knowledge
used to prove that statement. For example, a
prover could show that they have access to a
private key by encrypting a message chosen by
The proof can be trivially checked
oy the verifier by decrypting the cyphertext
with the public key. The private key, however,
remains secret.
More relevant to the domain,
knowledge proofs can be used for a party to

a verifier.

ZeLo-

Draft: 518f7b5fa4 - November 27, 2018

prove they have access to funds, or in the case
of Zcash, for a party to prove to miners that a
transaction is valid according to the consensus
rules of the network.

Zero-knowledge proofs can be used to con-
struct private financial systems on a public
blockchain. On their own, however, they stop
short of allowing safe delegation of private
data from one party to another, and suffer the
same always-online requirements of the “hash-
reveal” pattern.

Zero-knowledge proofs are a powerful cryp-
tographic tool, and can be used in conjunction
with other techniques to safely delegate secret
access and computation (see section 3.1).

1.3. Public applications, private data

None of these techniques adequately address
how to build a publicly verifiable, decen-
tralized, censorship-resistant application that
makes use of private data.

Consider contracts to reveal a secret in case
of a dispute between two parties, to sign a mes-
sage verifying contract identity off-chain, or to
securely encrypt files !.

2 Introducing keeps

To solve this mismatch between the trans-
parency of public blockchains, and the need of
many autonomous smart contracts for private
data, we introduce the keep.

A keep is an off-chain container for private
data. Keeps allow contracts to manage and
use private data without exposing the data to
the public blockchain.

2.1 Keep operations

Though keeps maintain state off-chain, they
are provisioned and messaged by contracts on-
chain. We will describe the keep in terms of
these on-chain operations. The practical im-
plementation of keeps, including security guar-
antees, is covered in sections 3 and 4.

2.1.1 Creation and population

A contract, Contractowner, requests a keep by
publishing a request to the blockchain. Once a
keep, Keepaccepted, has accepted a request and
finished initializing off-chain, it will respond to

1 We go over applications in more depth later in sec-
tion 8
Contractowner publishes a creation request, including an ini-
A keep, Keepaccepted, Publishes one or more public keys

Contractowner Publishes an initial secret on-chain, en-
crypted in total or in shares by one or more K Keepaccepted, +

another contract

Contract detegate, and a permission level, Pread OY Padmin-

a function to
her arguments

address,

to F. Initially FE{ fidentity, frsa; fecdsa}, though additional
KeePaccepted publishes the results of its computation, either

Contractowner Or Contractdelegate With permission Paamin

Keep operations
Create:
tial deposit and a public key, KContractowner*
Accept:
K, Keepaccepted; signalling readiness.
Populate:
or a specification for a secret to be generated.
Grant: Contractowner publishes
Compute: Contractowner or Contractdelegate Publishes
compute over the secret, F'(S, ...), as well as 0
functions are planned.
Results:
in whole or in part, over one or more invoca‘
Shutdown:
publishes a shutdown request.

ions.

the request with a set of public keys the call-
ing contract can use to communicate privately
with the keep.

Once the keep has been created, it can
be populated in a number of ways. dApps
can publish secret data to the blockchain, en-
crypted by the keep’s public keys, or send
the data to the keep off-chain. Alternatively,
a keep can self-populate with pseudorandom
data.

2.1.2 Publishing data on-chain

The purpose of a keep is to compute a function
over its secret and publish the results to the
blockchain.

Initially, keeps will support publishing their
secrets on-chain, unmodified or encrypted
with a public key provided by Contractowner-
This enables functionality that’s difficult in
today’s public smar
exposing dead man switch, useful in a variety
of decentralized market schemes.

contracts, like a secret-

Keeps can be extended to use their secret in
a variety of other ways, including as key ma-

terial for symmetric encryption and signing.

2.1.3 Access management

The owning contract Contractowner of a keep
can delegate access to the keep to other con-
tracts.

Read and admin access can each be granted,
allowing another contract i(Contractdetegate)

Draft: 518f7b5fa4 - November 27, 2018

to request that a keep’s content be published
(read permission, P,caq), or to delega
access to other contracts (admin permission,
Paamin). Owners (Contractowner) can also re-
voke their own access.

e further

Access management enables multi-party se-
cret escrow and auditability of secret access.

2.1.4 Destruction

Depending on the use case, keeps can be long-
or short-lived. Contracts can request that a
keep shut down, and should also handle keeps
that are terminated unexpectedly, scenarios
which are covered in more detail later in sec-
tion 5.2.

3 Eliminating third-party risk

We've described a simple black box for off-
chain data storage.
his method of secret management will enable
secrets to be bought, sold, and transferred on a
oublic blockchain, but doesn’t inherently solve
hird-party risks.

The standardization of

Next, we’ll describe techniques to eliminate
hird-party risk.

3.1 Secure multi party computation

Secure multi party computation (sMPC) is a
ype of cryptographic system where a compu-
ation is distributed across multiple partici-
yants, some of which may be dishonest. Each
yarticipant is initially given access to a share

of a secret by a dealer, and computes a func-
tion over that share. The outputs are then
reported to the dealer, who can assemble the
final output, without any participant learning
more than their initial secret share.
Intuitively, sMPC works like this:

1. A dealer D wants to compute a function
F over a secret, S.

2. The dealer selects n parties to the com-
putation, sending each of them a share of
the secret, s;.

3. Each party computes a function over their
share f;(s;) and reports the result to the
dealer.

4. The dealer combines these outputs, such

that G(fi(si), f2(s2), .-fn(Sn)) = F(S)

The shares s; should be chosen in such a way
that exposing any share does not jeopardize
the secret S. A common approach is to use
Shamir’s secret sharing [15], such that details
about the secret remain confidential in the face
of n — 1 dishonest parties.

This explanation holds for all F’ including
addition, subtraction, and multiplication by a
known constant. To achieve general compu-
tation, however, we also need to be able to
multiply secrets securely.

Multiplication adds what the literature calls
“rounds”- communication between the parties,
rather than just the dealer D.

To multiply two secrets, each party P; of
the n chosen by the dealer splits its share, s;,
into two components, s;; and sjg. The party
multiplies those two components, resulting in
si. Each P; then acts as a dealer among the
the remaining parties, splitting s; into n — 1
pieces.
Each P; can now resolve their resulting share
the round of multiplication, s/, given their
access to n — 1 shares of sj.

With addition and multiplication, sMPC
can securely execute general computation, at
the expense o.
tween the computing parties.

°

communication overhead be-

3.2 sMPC and the blockchain

sMPC was originally conceived in 1982 [16],
but its practical application has been limited

Draft: 518f7b5fa4 - November 27, 2018

due to restrictions on the security model. Ex-
isting sMPC solutions only maintain security
in the face of an honest majority of parties.

The advent of the blockchain enables se-
cure usage of sMPC in adversarial scenarios.
By using a public blockchain as an immutable
ledger, sMPC can be made secure in the face of
a dishonest supermajority [17], and, with the
requirement of a network token, can be made
strongly Sybil-resistant (see section 5).

For these reasons, sMPC and _ blockchains
are a natural fit. In the smart contract space,
sMPC has been proposed before as a privacy
mechanic.

In 2014, Vitalik Buterin gave a strong in-
troduction to the subject in an early blog post
on privacy on the Ethereum public blockchain
[7]. In 2016, a team from UMD designed Hawk
[18], a system that marries public and private
smart contracts via sMPC, and the Enigma
project out of MIT describes a system related
to ours [19], with a wider focus on general pri-
vate computation.

The Keep network will incorporate these
ideas into the first production-ready sMPC
system for a public blockchain.

4 Keep providers

The Keep network includes a number of dif-
ferent provider types, each with their own
strengths and tradeoffs. The most important
provider, however, is a novel application of se-
cure multi party computation.

4.1 Simple sMPC

Simple sMPC keeps are backed by n nodes,
each of which maintain a share of the pro-
vided secret, such that the secre
constructed without all n nodes colluding.

can’t be re-

These keeps can be populated securely by
divvying up a secret into shares via Shamir
secret sharing [15], and encrypting each share
with its respective node’s public key. The en-
crypted shares can then be published to the

public blockchain, or communicated off-chain.

The only computation these keeps will run
is an implementation of distributed RSA [20]
on sMPC, used to publish encrypted data to
the blockchain.

4.2 Signing sMPC

The next provider will extend the sMPC keep
with two new operations- securely generating
pseudorandom numbers, and signing and en-
crypting data, using the keep’s contents as a
key.

In addition to simple pseudorandom num-
bers, signing keeps will be able to generate
RSA [20] and Bitcoin [21, 22] key pairs, or be
populated with them via secret sharing.

This means signing keeps will be able to sign
and secure contract communications on- and
off-chain, as well as sign transactions for Bit-
coin, Ethereum, and other cryptocurrencies.

Finally, signing keeps can act as pRNG or-
acles, significantly improving current meth-
ods of random number generation on public
blockchains.

4.3 Future providers

The off-chain keep pattern is flexible enough to
include a variety of other pluggable providers,
each with their own unique benefits.

4.3.1

Keeps backed by secure hardware can be usec
to lower the cost of securing private data by
verifying that only signed code is run agains
privileged data.

Instead of requiring n nodes to safely spli
a secret, a secret can be sent to a single
node that’s properly responded to a chal-
lenge, proving it’s running signed code. No’
only are fewer nodes required, but these keeps
wouldn’t suffer the computation overhead o
secure multi-party computation.

This sort of security is fundamentally
weaker than that provided by secure multi-
party computation. If a single secure hard-
ware manufacturer is compromised, it puts all
nodes using that hardware at risk, shifting the
hreat model. The cost and benefit of this ap-
proach will depend on the application.

Secure hardware

4.3.2 Private smart contracts

Unlike related work on systems like Enigma
19] or Hawk [18], which use sMPC to build off-
chain and alternative-chain computation net-
works for private smart contracts, we’ve cho-
sen to restrict the initial sMPC keeps to gener-
ating, securing, storing, encrypting, and trans-
mitting secrets. Such restrictions help to min-

Draft: 518f7b5fa4 - November 27, 2018

imize the attack surface on keeps in a produc-
tion network.

In later work, sMPC schemes can be used
to build more feature-rich keeps. These keeps
will enable complex use cases, like operating
private ledgers against public blockchains, or
running third-party code trustlessly on private
data.

5 Incentivizing keep providers

Providers need to be incentivized to maintain
capacity on the network. Running and secur-
ing keeps should be a profitable way to use
excess compute and storage resources.

Consumer contracts, on the other hand,
need keeps that will provide:

e High availability

e Robustness against data loss
e Maintenance of confidentiality
e Data integrity

5.1 Paying for keeps

The best payment structure for keep providers
will reward highly available keeps, and punish
poor performance.
jsequence diagram of
operation payment;

The two primary costs providers incur are
storage and compute, which map naturally to
saying keeps per block and per operation.

Payment per block can be accomplished via
a deposit to the managing contract at the time
of keep initialization, metered out over the life-
ime of the keep, and refilled occasionally by
he calling contract. Though this seems like
a good fit for payment channels, minimizing
on-chain fees, the security ramifications differ
irom typical two-party channels. These differ-
ences are discussed further in the next section.

deposit +  per-

Payment per operation is simpler. Each re-
quest to publish a keep’s contents will require
oayment of an amount agreed to at the initial-
ization of a keep.

5.2 Concerns with uptime and
reliability

Because availability is vital to using keeps in

practice, improper termination must be disin-

centivized.
jproper shutdown protocolj,

Any keep that doesn’t respond properly

within a certain block count threshold to a
request will be considered aborted. Aborted
keeps will forfeit all client deposits that have
yet to be disbursed. To avoid skewing client
incentives, the deposits that have been earned,
out not yet disbursed, will be burned, and
he unearned deposits will be returned to the
client.
Volatility in the crypto currency markets
can provide a strong incentive for a keep
provider to improperly terminate a keep. If
he value of the paid currency drops signifi-
cantly relative to the cost of running a keep,
it’s in a provider’s best interest to devote their
imited resources to a better-paying client.

To counter this issue, keep providers will
need a protocol to optionally re-negotiate fees

or a running keep.

5.3 Concerns with active attacks

Existing open-source sMPC frameworks, such
as VIFF [23], are secure against active attacks
in the presence of a # supermajority of honest
nodes. In such an attack, keeps can be forced
to return malformed data, but secrets can’t be
compromised unless all nodes with a unique
share backing an sMPC keep are colluding- an
extremely high bar for a Sybil attack.

Recent approaches using SPDZ proofs [17]
anchored on the blockchain [24, 25] make
such correctness attacks impossible, even if
all nodes backing a keep are compromised.
sMPC keeps will publish proofs to the pub-
ic blockchain that can be used to verify cor-
rectness. The threat of active attacks is then
reduced to disrupting keep availability, rather

1an returning malformed data.

We address the issue of network disrup-
ion by introducing two incentives to keep
providers, making active attacks on data avail-
ability impractically expensive.

First, keep providers will be required to
prove their holdings in a token native to the
system. Significant disruption of the network
should lead to a drop in the value of the to-
ken, incentivizing provider honesty, lest they
devalue their holdings. This scheme also pro-
vides resistance to Sybil attacks
attacker would need to obtain an outsize por-
ion of all tokens locked up by keep providers

an active

Draft: 518f7b5fa4 - November 27, 2018

o ensure their overwhelming selection backing
new keeps.

Second, keep redundancy can be used to
further minimize availability disruptions [25].
All nodes can be required to include a deposit
when they publish their results. If their results
can’t be verified by the included SPDZ proof,
heir deposit is forfeit to competing nodes.

6 High-level network design

Deploying sMPC-based privacy on a public
slockchain requires supporting infrastructure.
To build a functional privacy network against
Ethereum, our first target blockchain, we’ll in-
roduce components to ensure fair keep node
selection, report results, and incentivize net-
work actors.

6.1 The Keep network token

The native network token, KEEP, will be re-
quired for providers to participate.

To be chosen to provide a node for a new
keep, a provider must lock up a minimum
stake in KEEP tokens, using a shared staking
contract.

At any time, a provider can choose to re-
trieve their stake— for example, to liquidate
their position. All withdrawals, however, will
be subject to a two-week waiting period to dis-
incentivize providers from quickly staking and
withdrawing their position, which could have
adverse effects on running keeps and fair keep
selection.

Requiring a native token, rather than
the underlying blockchain’s currency, means
providers will suffer from negative externali-
ties in the presence of malicious behavior (see
section 5.3). This sort of staking also strength-
ens the system against Sybil attacks (see sec-

tion 6.2).

6.2 Ensuring fair keep selection

Contracts requesting keeps and keep providers
to be matched. An ideal system
would enable price discovery, incentivizing
new providers to join if capacity is low, across
different keep types.

This matching problem is a great fit for
a market. Unfortunately, on-chain markets
are a difficult problem, prone to complexity,
miner frontrunning, and orderbook manipula-
tion. A clever attacker could manipulate a

neec

market, giving them an unfair advantage to
oe chosen for a particular keep. Essentially, a
wo-sided market would expose the network to
Sybil attacks.

In lieu of a market, we need a fair keep se-
ection mechanism.

6.2.1

The best way to select providers for a new
keep is with a fair coin toss. Unfortunately,
Ethereum only supports deterministic func-
ions. Contracts that require a random num-
oer often rely on a trusted oracle.

A system is only as decentralized as its most

centralized component. Relying on a trusted
hird party for such a core function of the
project isn’t an acceptable risk.
Instead, we can utilize our keep providers as
a decentralized source of entropy. All staked
providers can be required to take part in the
random number generation process.

There are a few design considerations for
such a system:

Random beacons

e Providers can’t be allowed an unfair ad-
vantage over each other in the node selec-

tion process.

e Each block on the public chain will re-
quire at least one random number of suf-
ficient size. Today’s Ethereum block time
is 25 seconds, but that will likely change
significantly in the future. The RNG pro-
cess needs to be fast enough to support
much shorter block time, if necessary.

e RNG needs to be resilient to node failure.
Failure in production means no new keeps
can be created, so resilience to partitions
yetween providers as well as against ac-
ive denial of service attacks is desirable.

e While not a hard system requirement,
oroviding the Ethereum network with a
rusted source of randomness will also be

a great boon to other projects.

Most distributed key generation schemes are
too slow or prone to manipulation to be con-
sidered. Any scheme we choose should provide
good performance, regardless of the number of
participating providers. Instead, most gener-
ation schemes require rounds of communica-
tion between participants, slowing down the

Draft: 518f7b5fa4 - November 27, 2018

key generation process and providing a large
surface for communication failure.

Fortunately, the Dfinity team has solved
these issues with their random beacon design,
based on a concept they call threshold relay
[26].

6.2.2 Threshold relay

This work relies on the idea of threshold secret
sharing schemes—secret sharing schemes that
retain confidentiality up to some threshold t of
honest actors.

Threshold signatures are a related idea. A
threshold signature is a signature across n par-
ties that requires some minimum ¢ actively
participating to sign.
” multi-sig” as deployed in cryptocurrencies to-
day.

Traditional multi-sig, however, requires a
smart contract on the blockchain to validate

It’s a similar idea to

each signature and release funds. Threshold
signature schemes actually require a threshold
t to construct a signature at all, removing a
layer of complexity and coordination between
parties.

The use of threshold signatures means a
number of participating signers in a signing
group can be unavailable, and the signature
will still succeed in the presence of t function-
ing signers. This provides some of our bea-
con’s required resilience in the face of failing
or misbehaving nodes.

If threshold signatures sound familiar, it
might be because they’re a core functionality
keeps provide. For example, a keep signing
a Bitcoin transaction does so using
ECDSA.

A threshold relay is a way to chain threshold
signatures to create a random beacon. Par-
icipants in a threshold relay form
groups. These groups generate new public
keys that identify the group and correspond to
a newly generated threshold private key, split
across the participants.

As providers join the network, they will
form threshold groups. These groups will then
sign a piece of random data, initially provided
vy early network contributors, to bootstrap
he relay. The resulting signature provides the
random data for the next iteration, which can
9e verified by the rest of the network partici-
pants and rejected if invalid. Each iteration, a

hreshold

hreshold

Registration:

Trusted setup:

Bootstrapping:

Iteration:

Failure:

Iterative threshold signatures for randomness on existing chains

As providers join the network, they register with at least one
threshold group G; of all groups G, generating a share of the
group’s private key, s;. Threshold groups are capped at c
members, and may intersect. Groups that have reached this
maximum size publish their public key to the blockchain.
We'll designate such groups as Gregistered-

A trusted party posts a random value ro to the blockchain
as the beacon’s first output.

mod(ro,|Gregistered|) is used to select a registered threshold
group, Gi, from G'registered. Gi signs ro and publishes the
result, r, = threshold(ro, 89-44) where so, is the minimal
shares necessary for the group to produce a signature. Note
hat threshold(...) must be a deterministic signature scheme
o avoid share withholding attacks leading to a biased out-
out.

Each block published on the chain will include a signature
‘rom G'registered Of the random value r;. As the chain grows,
he signing threshold groups will change based on provider
availability. If any group is non-responsive up to its thresh-
old t, the group is removed from Gegistered:

Each iteration is an opportunity for a group to fail to gen-

erate a valid signature. If a group G; fails to sign the last
iteration’s random value, G;+1 will be used instead.

new signing group is chosen by the previous it-
eration’s random value. As all groups sign the
previous iteration’s value, if a signature that’s
chosen is invalid, the signature from the next
group in line can be chosen instead.

Importantly, the threshold signature scheme
needs to be deterministic to prevent individual
shareholders from biasing the signature out-
come in their favor. BLS signatures [27] have
been used in related work.

6.2.3. Keep selection group

Our threshold relay system will be composed
of keep providers seeking to be chosen to back
a new keep, capturing the fees from that keep.

Each block will include a random signa-
ture, published by the nominated keep selec-
tion group. Any keeps that require new nodes
will have their providers chosen randomly, us-
ing the beacon value from the last block.

In this way, we can ensure fair chances to
all staked keep providers, keeping the cost of
a Sybil attack high.

Draft: 518f7b5fa4 - November 27, 2018

7 The result registry

Keeps will offer a number of methods to pub-
lish to the public blockchain. In the case where
keeps publish to a smart contract provided by
the keep owner, coordination is simple. In uses
that don’t have a natural contract to commu-
nicate with, a result registry will be provided
as a default to simplify keep and owner coor-
dination.

8 Applications

8.1 Dead man switch

A dead man switch is a device that is auto-
matically activated in case its owner becomes
incapacitated. Keeps enable a particular kind
of dead man switch- publishing a secret, under
certain contract conditions.

Examples of dead man switch applica-
tions with keeps include automated inheri-
tance (“send my beneficiary my private key if
I don’t check in quarterly”), arbitration with
time limits (“if no decision is made in 10
blocks, publish a shared secret”), as well as
protection for leakers (“publish a key to these
insurance files if I don’t check in”).
8.2 Marketplaces for digital goods

Buying and selling digital goods on public
blockchains today requires settling off-chain.
Keeps make marketplaces for digital goods,
like audio and video files, straightforward.

Without keeps, each transfer of a private
digital good requires one or more hash-reveal
constructions on-chain. More complex scenar-
ios that require escrow, arbitrators, and other
parties who might need access to the trans-
fered digital good will need n? on-chain trans-
actions to maintain security. They also require
each party to be online to participate.

Keeps obviate always-online requirements,
and simplify the hash-reveal protocol to access
management. All keep access is auditable, and
participants can have access to a keep with-
out viewing its contents, allowing further op-
timization.

Without an always-online requirement or
complex reveal protocols, keeps can efficiently
support services like iTunes on the blockchain.

8.3 Pseudorandomness oracle

Since keeps can populate themselves with ran-
dom data, they can act as pseudorandomness
oracles, improving on currently popular meth-
ods [28]. sMPC and other secure keeps are a
good fit for decentralized lotteries and other
games of chance, as well as offering a build-
ing block for other on-chain algorithms that
require tamper-resistant pRNG.

This capability is an important component
of advanced keep uses, like decentralized sign-
ing.

8.4 Decentralized signing service

Signing sMPC keep providers are able to sign
messages, including blockchain transactions,
using a generated or provided private key.

For the first time, contracts will be able
to assert their identity off-chain, without re-
quiring the recipient’s awareness of blockchain
state.

Consider a decentralized signing service for
Bitcoin transactions. The service can partici-
pate in multi-signature transactions, only sign-
ing transactions that follow a strict set of rules,
including daily spending limits and recipient
whitelists.

Draft: 518f7b5fa4 - November 27, 2018

Other uses for such a service include second-
factor authentication, where a contract can an-
swer a challenge-response protocol based on
rules on the blockchain.

8.5 Custodial wallets and cross-chain
trading

As a special case of a signing service, contracts
can use keeps to generate their own cryptocur-
rency wallets, taking full custody of any re-
ceived funds.

For example, a contract can generate a Bit-
coin wallet, and sign Bitcoin transactions in
response to receiving assets on the contract’s
native blockchain.

8.6 Encryption service for blockchain
storage

Services like Filecoin [29] and Storj [30] are
being built to provide cheap, ubiquitous stor-
age, accessible globally, via smart contracts
and traditional storage interfaces.

These services offer few privacy guarantees
by default, leaving the onus of file encryption
on users. Keeps can provide a private bridge to
blockchain storage. By generating an AES key
at keep initialization and providing off-chain
data access to the keep, smart contracts can
use keeps to secure files stored on decentralized
services.

8.7 Banking on public blockchains

As more keep providers are developed, more
applications that once required a_ private
blockchain can be built against public net-
works.

Traditional finance offers many examples.
Consider lending, a basic service provided by
most banks.

There are a number of sensitive variables in-
volved in the lending process. Borrower credit
scores are sensitive; risk assessment is highly
competitive; the terms of a loan aren’t typi-
cally made public.

Keep providers that execute generic private
smart contracts can protect scores and the
risk assessment process, while maintaining au-
ditability and all other benefits of a public
blockchain.
References

[1]

2]

[4]

[10]

[11]

Stan Higgins. Bitcoin’s privacy gets
‘failing grade’ 2016 threat
port. https: //www.coindesk.com/

in re-

bitcoins-privacy-2016-threat-report/.

Accessed: 2017-08-16.

Ethereum StackExchange private info
https: //ethereum.
stackexchange.com/questions/2624/
private-info-on-ethereum. Accessed:
2017-08-16.

Greg Maxwell. Confidential trans-
actions. https: //people.xiph.org/
~greg/confidential_values.txt.

The
dential

on ethereum.

confi-
https:
//elementsproject.org/elements/
confidential-transactions/.
cessed: 2017-08-16.

Eli Ben Sasson, Alessandro Chiesa,
Christina Garman, Matthew Green, Ian
Miers, Eran Tromer, and Madars Virza.
Zerocash: Decentralized anonymous pay-
ments from bitcoin. In Security and Pri-
vacy (SP), 2014 IEEE Symposium on,
pages 459-474. IEEE, 2014.

Zcash: All coins are created equal.
https://z.cash/. Accessed: 2017-08-16.

Secret sharing DAOs: crypto 2.0. https:
//blog.ethereum. org/2014/12/26/
secret-sharing-daos-crypto-2-0/.
Accessed: 2017-08-16.

Vitalik Privacy on
the — blockchain. https://blog.
ethereum. org/2016/01/15/

Elements Project

transactions.

Ac-

Buterin.

privacy-on-the-blockchain/, 2016.
Accessed: 2017-08-16.

Joseph Poon and Thaddeus Dryja.
The bitcoin lightning network: Scal-
able off-chain instant payments.
2016. https: //lightning.network/
lightning-network-paper . pdf Ac-

cessed: 2017-08-16, Draft Version 0.5.9.2.

On sharding — blockchains. https:
//github.com/ethereum/wiki/wiki/
Sharding-FAQ. Accessed: 2017-08-16.
Joseph Vitalik Buterin.
Plasma: Scalable autonomous smart con-

Poon and

Draft: 518f7b5fa4 - November 27, 2018

12

13

14

15

16

[17

[18

[19

[20

]

tracts. https://plasma.io/plasma.pdf
Accessed: 2017-08-16.

Commitment Wikipedia.
https://en.wikipedia.org/wiki/
Commitment_scheme. Accessed: 2017-09-
02.

scheme -

Quorum. https://github.com/
jpmorganchase/quorum. Accessed:
2017-08-16.

The Coco Framework: Technical

Overview. https: //aka.ms/cocopaper.
Accessed: 2017-08-21.

Shamir’s sharing. https:
//en.wikipedia. org/wiki/Shamiry
27s_Secret_Sharing. Accessed: 2017-
08-16.

Andrew C Yao. Protocols for secure com-
putations. In Foundations of Computer
Science, 1982. SFCS’08. 23rd Annual
Symposium on, pages 160-164. IEEE,
1982.

Multiparty computation with spdz online
phase and mascot offline phase. https:
//github.com/bristolcrypto/SPDZ-2.

Accessed: 2017-08-16.

Ahmed Kosba, Andrew Miller, Elaine
Shi, Zikai Wen, and Charalampos Pa-
pamanthou. Hawk: The blockchain
model of cryptography and _ privacy-
preserving smart contracts. In Se-
curity and Privacy (SP), 2016 IEEE
Symposium on, pages 839-858. IEEE,
2016. http: //download.xuebalib.com/
xuebalib.com.27267.pdf.

Guy Zyskind, Oz Nathan,
Pentland. Enigma: Decentralized com-
putation platform with guaranteed pri-
vacy. arXiv preprint arXiv:1506.038471,
2015. https://arxiv.org/pdf/1506.
03471.pdf.

Atle Mauland.
rsa

secret

and Alex

Realizing distributed

multiparty compu-
tations. Master’s thesis, Institutt for
telematikk, 2009. https: //brage.
bibsys.no/xmlui/bitstream/handle/
11250/261858/347875_FULLTEXTO1 . pdf
Accessed: 2017-08-20.

Rosario Gennaro, Steven Goldfeder, and
Arvind Narayanan. Threshold-optimal

using secure
[22

[23

[24

[26

[27

[28

]

dsa/ecdsa signatures and an application
to bitcoin wallet security.
tional Conference on Applied Cryptogra-
phy and Network Security, pages 156-174.
Springer, 2016. https://eprint.iacr.
org/2016/013. pdf.

In Interna-

Fred Gross-
Nicolas Inden,

Jan Henrik Ziegeldorf,
mann, Martin Henze,
and Klaus Wehrle. Coinparty: Secure
multi-party mixing of bitcoins. In
Proceedings of the 5th ACM Confer-
ence on Data and Application Security
and Privacy, pages 75-86. ACM, 2015.
https: //www.comsys.rwth-aachen.
de/fileadmin/papers/2015/
2015-ziegeldorf-codaspy-coinparty.
pdf.

Viff, the virtual ideal functionality frame-
work. http://viff .dk/. Accessed: 2017-
08-16.

Marcin Andrychowicz, Stefan
bowski, Daniel Malinowski, and Lukasz
M Secure multiparty computa-
tions on bitcoin. In Security and Privacy
(SP), 2014 IEEE Symposium on, pages
443-458. IEEE, 2014. https://eprint.
iacr.org/2013/784. pdf.

Cc Noyes.
party computation

https://www.overleaf.com/articles/
bl

Dziem-

azurek.

Blockchain multi-

markets at

2arles
scale.

mwjgmsyybxvw/viewer.pdf Accessed:
2017-08-16.
Threshold relay: how to achieve near-

instant finality in public blockchains
using a vrf. https://dfinity.network/
pdfs/viewer.html?file=../library/
threshold-relay-blockchain-stanford.
pdf. Accessed: 2017-09-02.

Dan Boneh, Ben Lynn, and Hovav
Shacham. Short signatures from the
weil pairing. Advances in Cryptol-
ogy—ASIACRYPT 2001, pages 514-532,
2001. https://www.iacr.org/archive/
asiacrypt2001/22480516.pdf Ac-

cessed: 2017-09-06.

Ethereum StackExchange: How can I se-
curely generate a random number in my

smart contract? https: //ethereum.

Draft: 518f7b5fa4 - November 27, 2018

[29

[30

]

]

stackexchange.com/a/207. Accessed:
2017-08-16.
Filecoin: A Decentralized Storage Net-

work. https://filecoin.io/filecoin.
pdf. Accessed: 2017-08-16.

Storj: A Peer-to-Peer Cloud Storage Net-
work.  https://storj.io/storj.pdf.
Accessed: 2017-08-16.

ockchain-multiparty-computation-markets-at-scale/
