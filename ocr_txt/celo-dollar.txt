The Celo Protocol: A Multi-Asset Cryptographic Protocol for
Decentralized Social Payments

cLabs Team

DRAFT version 0.25

Abstract

Two of the biggest barriers to the large-scale adoption of cryptocurrencies as a means of payment
are ease-of-use and purchasing-power volatility. We introduce the Celo protocol, a protocol that
addresses these issues with an address-based encryption scheme and a stable-value asset. We
show how these attributes together can be used to foster a monetary ecology that includes global
reference currencies, local and regional stable-value currencies, and a social dividend. Our first
application is a social payments system centered around mobile phones.
Contents

1

2

Introduction

Ease of Use through Lightweight Identity

2.1 Address-Based Encryption... 0...
2.1.1 Single-Node Address-Based Encryption .......... 0000000000004
2.1.2 Drawbacks 2. 1. 0 ee
2.1.3 Distributed Scheme .. 2... 0 ee
2.1.4 Summary of Operations... 2... ee

2.2 Aggregating Reputation Signals through Encrypted EigenTrust ..............
2.2.1 EHigenTrust .. 2... 0... ee
2.2.2 Privacy-Preserving EigenTrust through Zero-Knowledge Proofs ..........
2.2.3 Personalized Pre-Trusted Peers . 2... 0. ee
2.2.4 Practical Implications .. 2... 2. ee

Stabilizing Value

3.1 Elastic Coin Supply and Shifting Volatility Risk... . 2... 0... 0.0.0 20000.
3.2 Protocol Summary
3.3 Shared Reserves... 2... 0 ee
3.4. Price Discovery and Mechanics of Reserve Asset Purchasing ................

Governance and Incentives

4.1 Maintaining the System . 2... 2 ee

4.2 Bolstering Reserves and Contracting Stable-Value Currency Supply when Needed... .

4.3 Increasing User Base and Usage of the System... 2.2... 00.2. eee ee

4.4 Improving the Protocol ... 2.2... 0.000000 0000000000000 00000002
4.4.1 Technical Improvements ..... 20.2... 000000
4.4.2 Introducing Regional Currencies and Broadening the Reserve Base ........
4.4.3 Futarchical Governance
4.4.4 Partitioned Reserves... 6.

Conclusion

1 Introduction

Cryptocurrencies have several advantages to fiat currencies as a means of payment. They enable
transfer of value that is much faster than a bank wire, at lower cost (especially for international
payments), in a publicly auditable and secure manner, using a technology that is globally accessible
so long as you have a smartphone. Further, cryptocurrencies can be programmed; allowing financial
contracts, escrow, and insurance, all without intermediaries.

However, at the moment, there are several barriers to the mainstream adoption of cryptocurrencies
as a means of payment. First, due to deterministic supply rules and unpredictable coin demand,
successful coins! experience deflationary price instability. As a result, users rationally prefer to use
them as a store of value rather than a medium of exchange. Second, even when people do wish to use
price-volatile cryptocurrencies as a means of payment, they need to generate a private/public key pair
to receive a payment, and enter in somebody’s public key in order to send a payment. While these
may seem small obstacles, experience has shown that small differences in user experience lead to large
differences in usage outcomes.

For a cryptographic social payments system to prosper, sending a payment should be as easy
as sending a text message, and the volatility of the currency should be minimal. We describe the
Celo protocol, a protocol that addresses each of these issues. To address ease of sending payments,
the Celo protocol introduces a cryptographic scheme that we call address-based encryption, in which
participants verify a series of cell-phone number-to-public-key mappings, allowing users to then use
their friends’ cell phone numbers as public keys.

To address stability of value, the Celo protocol introduces an asset whose value is stabilized using
a monetary policy with elastic supply rules, backed by a variable-value reserve. Further, it introduces
a governance structure that allows the protocol to create a family of local, regional, and utility stable-
value currencies, where the introduction of new successful stable-value coins to the family strengthens
the stability characteristics of the existing coins.

Finally, the Celo protocol introduces a mobile block reward mechanism in which all users involved in
transactions are also able to participate in verifications, creating a broad participant base and making
block rewards more accessible to day-to-day users.

Together, these underpin a compelling social payments protocol.

2 Ease of Use through Lightweight Identity

An important obstacle for the mainstream adoption of cryptocurrencies as a means of payment is the
lack of intuitive, decentralized public key infrastructures. As a result, in order to send a payment in
today’s decentralized systems, users must know the public key of the intended recipient (unless they
are operating through a centralized gateway). And in order to receive a payment, a user must first set
up a private/public keypair and broadcast it. It would be far easier to send a payment directly to an
email address or phone number, and to be able to receive a payment without having to first set up a
wallet.

Identity-based encryption [18] holds promise towards this end. In this scheme, when Alice wants
to send an encrypted message to Bob at bob@company.com, she can simply use the public key string
bob@company.com, without needing to obtain Bob’s public key certificate. While a cryptocurrency
system based on identity-based encryption would lead to a much more seamless user experience, both
the original proposal and subsequent implementations [4, 6] are hindered by the fact that they require a
trusted third party, called a private-key generator, to generate private keys. As a result, these schemes
are less useful in open, permissionless systems.

1 Academics, regulators, entrepreneurs and others use "coin" and "token" interchangeably to describe assets that
function as a digital representation of value native to a distributed ledger. In this paper, we refer to ‘digital assets,’
‘coins,’ ‘cryptocurrencies’ and ‘tokens’ with general interchangeability.

w
2.1 Address-Based Encryption

We propose a variant on identity-based encryption, called address-based encryption. Rather than
directly using an e-mail address or phone number as a public key, and then relying on a trusted private-
key generator to generate a corresponding private key, we have users generate their own private/public
key pair in the traditional manner. The user then registers their public key in a public, append-only
database that stores [address -> public key] tuples. This database is functionally decentralized,
so that no central owner is responsible for storing, managing, or maintaining the database, but logically
unified, so that everybody can at any time see all the entries in the database. Crucially, the [address
-> public key] tuples are attested to by a peer-to-peer network. To perform attestation, randomly
selected validators in the network send a signed and secure message to the registrant, who then signs
the message with her private key and returns it to an Attestations smart contract. The Attestations
contract checks that the validator did indeed send the message, and that the signature matches the
public key of the recipient.

This protocol works not just with email addresses, but with any channel to which a secure message
can be sent, for example, a cell phone number, an IP address, or even a bank routing and account num-
ber. Further, arbitrary strings may be appended to the address in the database key, allowing multiple
public keys to be stored for each address, each for a different application. As a consequence, the en-
cryption scheme supports a large number of cryptographic applications, from two-factor authentication
to decentralized social networks, without relying on trusted third-parties.

For the social payments use case, it allows for two important features. First, a user can send Celo
currencies to a friend by using her phone number as the public key, allowing easy payments to contacts.
Second, a user can send Celo currencies to a friend even if the friend has not yet downloaded a Celo
wallet.

2.1.1 Single-Node Address-Based Encryption

For the purposes of explanation, we begin by describing a simplified version of the address-based
encryption scheme in which a single node, called a validator node, maintains the state of the system.
The key role of the validator node is to maintain a public, append-only database of [address ->
public key] mappings. In the single node case, the validator node is similar to a traditional key server
except that it not only stores the [address -> public key] mappings, but also attests to them as
follows:

When a user wishes to register a public key with the scheme, they generate a private/public key
air, and then submit their [address -> public key] mapping to the validator node. (In our use
case, the address is the cell phone number of the user, but in the general case it could be any address to
which a secret message can be sent.) The validator node sends a signed secret message to the address in
he entry. The user then sends that message to an Attestations smart contract, which verifies both sig-
natures by decrypting them with the public keys of the user and the validator. If the decrypted message
matches the secret message, the smart contract writes the following entry to the database [address ,
user public key, secret message, user signed secret message, validator signature].

2.1.2. Drawbacks

This simplified version has the following drawbacks:

Address harvesting. A publicly viewable database with unencrypted phone numbers allows spam-
mers to harvest the cell phone numbers of all of the users. To address this, we can store a one-way
hash of the address rather than the address itself. To increase the entropy of the underlying string (to
make reversing the hash more difficult) we may append a pepper to the string to be hashed?.

2Even with an appended pepper, the following scenario is possible: a spammer one-way hashes every possible 10 digit
number along with every possible pepper, and then checks to see which hashed values are in the database. However,
harvesting at high cost is possible even today, by taking every possible 10 digit number, sending an SMS to each, and
seeing if it goes through. Therefore, our goal would be to make the effective cost of decryption more expensive than the
cost of sending a bulk SMS.
Single key per address. In practice, people may want to store multiple public keys associated with
their address. The simplified protocol gives no mechanism to do so. As a solution to this, we can
allow the key to be the hash of an address concatenated with an optional arbitrary string. This allows,
for example, Bob to store an application key at hash (‘‘4155551212 || application_name’’), or an
ephemeral application key at hash(‘‘4155551212 || application_name || 20171117’’).

Node failure. Any model that relies on a single node to maintain state is susceptible to that node
failing. We can address this by having multiple nodes participate in maintaining the state. (In doing
so, we must also ensure that only a small number of nodes send a secret message to a user issuing
a attestation request, to avoid overloading the user.) In this model, the secret message must also be
verifiable by other validators, even if they did not construct it. This is achieved by signing the message
with the private key of the validator sending it. To avoid repeat-attacks, each message from the same
validator must be unique.

Malicious Validator. A malicious validator node may choose to bypass the message/response step,
and instead, write an entry to the ledger in which they choose somebody else’s address, generate their
own key pair for that address, and then sign the secret message with the private key that they generated.
Doing so allows the validator to spoof an address, claiming payments intended for somebody else. We
can address this by requiring consensus between multiple validators who have no mechanism to collude.

Transaction Transparency. If we are using hashed phone numbers as public keys, then a traditional
bitcoin-style blockchain will allow a user to see the transactions of the contacts in their address book.
We can address this by implementing the computationally efficient version of zk-snarks as described
in [12].

DDoS. Finally, a malicious user may submit thousands of bogus requests to the validator, both tying up
the validator and effectively using the validator as a spam agent. We can mitigate this by introducing
a cost to attestation.

2.1.3 Distributed Scheme

We introduce here a distributed scheme that introduces each of the features suggested above. In this
scheme, rather than the single validator node we describe in Section 2.1.1, a peer-to-peer network of
multiple validator nodes maintains the database. The network is open and permissionless; anybody
may join as a validator, and validators may leave and rejoin the network at will. Each validator
maintains a full copy of the attestation pending queue and attested user database. For each attestation
request, validators are chosen at random to handle the attestation.

An attestation workflow would then look like this. First, a user will issue an attestation request by
sending the request to the Attestations smart contract, along with an attestation fee. The Attestations
contract then selects a validator at random from the validator set and generates a message for the
validator; the validator then signs that message, sends it to the registrant, who also signs it and sends
it back to the Attestations contract. The Attestations contract then verifies the signatures of the
registrant and the validator, and if they match, then records the attestation. Most dapps will require
multiple attestations, in which case, if there are not enough attestations recorded on the chain, they
will simply request more.

Having multiple validators addresses the node failure issue. Requiring multiple attestations ad-
dresses the malicious validator issue. The attestation fee addresses the DDos issue. And the attesta-
tion requests are issued as a hash of the (address | pepper | application string), so as to avoid
address harvesting, and to allow for multiple keys per address.

2.1.4 Summary of Operations

An alternative way of framing the protocol is in describing the roles and operations allowed to each
node in the system.
Any user may:

e request verification of a public key associated with her address, by broadcasting her [hash (address
| optional appended string) -> public key] tuple to the verification pending queue

A verified user may:

e add a new public key by creating a [hash(address | optional appended string) -> public
key] mapping

e revoke any public key associated with their address
e change any public key associated with their address
A validator may:

e compete with other validators for the right to write a block and send a secret message to the
addresses on the verification pending queue, and validate the signed responses of the previous
block’s verifications.

Anybody may:

e look up the public key for a given address hash (or address hash || string concatenation) in the

verified user database.

2.2 Aggregating Reputation Signals through Encrypted EigenTrust

Once there exists a decentralized mapping of phone numbers to public keys, it can be used to bootstrap
a reputation system that helps users determine the trustworthiness of any new users they may transact
with.

A person’s cell phone contact list is a rough first-order proxy for a list of people in whom she has a
certain level of trust. One can imagine refining this trust proxy through explicit signals (for example,
a user may rate people in her contact list in an application-specific manner, or attest to whether a
contact in their address book is a person or not), and implicit signals (for example, if a user makes a
payment to somebody in her contact list). These signals can be maintained locally, on the user’s cell
phone, without sharing them with anybody else.

Such address-book based trust signals define a trust network that is both logically decentralized
and functionally decentralized. No single entity stores or has visibility into the entire trust network;
each user simply knows the people whom they trust, and the level to which they trust them. We
describe below how to compute sybil-resistant, privacy-preserving aggregate reputation scores given
this decentralized trust network.

2.2.1 EigenTrust

EigenTrust [14] is a decentralized algorithm for computing global reputation scores, given pairwise local
trust scores. The key intuition behind EigenTrust is that a person’s reputation score can be defined
as the number of people who trust that person, weighted by their reputation scores. This recursive
computation converges for all nodes to the principal eigenvector ? of the trust matrix 7’, where Tj is
number between 0 and 1, and whose magnitude is proportional to the relative level that node i trusts
node 7°.

In EigenTrust, the principal eigenvector of T’ is computed using a distributed variant of the Power
Method [20]. In the context of a social payments network, it would proceed as follows: The trust
network T;; would be some variant of the payment network, where T;; would be nonzero if node i
has paid node j, and node j is in the address book of node i. Each node stores their own current
t;, and has access to the values of T;; in row i and column j (the people with whom the node has
interacted). The principle eigenvector # would then be computed in an iterative fashion as follows. At

3An alternative way to frame the problem is to compute the stationary distribution of the ergodic Markov chain
described by the trust network.
each iteration, each node send across their t; - Tj; scores to each node j that they’ve paid in the past.
The nodes j wait to receive all of the scores from the nodes that have paid them in the past, and then
compute their own t;, and then pass their t; - Tj, along to the nodes k that they have paid.

2.2.2. Privacy-Preserving EigenTrust through Zero-Knowledge Proofs

There are two differences between the algorithm we propose and the original EigenTrust algorithm.
First, the simplified description above allows nodes to lie about their own t;. The original Eigen-
Trust algorithm addresses this by relying on score managers to steward the computation of t; for each
node. In the original scheme, each node has three score managers, assigned at random through a
distributed hash table, who store the T;; values for each node and compute and store t; for each node.
While this addresses the dishonest node attack, it is not ideal in the social payments scenario, as it
requires sharing transaction information with other peers in the network. We address this by having
each peer perform the computation themselves, as per the simplified version, but also prove, to a high
probability, to all adjacent nodes that they have performed the computation correctly. One can do so
by constructing a zero-knowledge proof using a variety of cryptographic means, including [10, 3, 5].

2.2.3 Personalized Pre-Trusted Peers

Second, in order to break malicious cliques, and to ensure convergence of the power method and
uniqueness of the principal eigenvector, Eigen Trust introduces the notion of pre-trusted peers, a group
of peers that are active and assumed to be universally trusted. This ensures that the graph is acyclic
and strongly connected (and that the matrix is irreducible and that the problem is well-conditioned).
However, it requires the system to define a set of universally trusted peers, and concentrates outsized
power to confer reputation in those pre-trusted peers.

We can address this through personalization. Rather than computing a single global reputation
vector, the system can compute a personalized global reputation vector for each peer, that gives the
reputation score of each peer j in the network from the point of view of a single peer 7. To compute
personalized EigenTrust for peer 7, one can simply perform a traditional EigenTrust computation, but
use the contact list of peer i as the set of pre-trusted peers.

This is far more computationally expensive than a single EigenTrust computation; however, we
apply many of the computation-saving techniques that enabled personalized PageRank [13] to a per-
sonalized EigenTrust computation.

2.2.4 Practical Implications

For the social payments case, in which people text money to friends, the address-based encryption
scheme suffices as a lightweight identity proxy, allowing people to send money directly to people’s cell
phone numbers, even if they have not signed up for a wallet.

As people are interested in using the protocol to pay people outside of their direct circle of contacts,
it is useful for a user to be able to aggregate the trust signals of those in their network to make purchase,
payment, and credit decisions, and to mitigate bad actors.

Further, a reputation scheme as we described enables a more robust identity scheme. Most identity
schemes are based on attestations from others, and it would be useful to be able to weight those
attestations by the reputation score of the attestor.

3 Stabilizing Value

Perhaps the biggest hurdle to the use of cryptocurrencies as a means of payment is their volatility.
Consumers are unlikely to want to buy a volatile cryptocurrency to spend it, since the purchasing
power of their accounts would fluctuate widely with market demand for the currency. Merchants who
accept cryptocurrencies are likely to convert to fiat upon payment, because their business model does
not involve speculating on cryptocurrencies. And the most successful cryptocurrencies today are not
just volatile but deflationary — their success leads to their price rising; as a result, prices denominated
in the currency fall. Rational behavior would be to use such currencies as a store of value rather than
a medium of exchange, and in practice that is what has happened.

Stable-value cryptocurrencies would bring a number of benefits to the cryptocurrency ecosystem.
For one, stable prices remove a considerable barrier for using cryptocurrencies as a medium-of-exchange;
salaries, prices of goods, fixed obligations, can all be set in a stable value cryptocurrency without
requiring either party to speculate on the future value of the currency. Further, financial contracts are
more easily built with a stable value coin, because the issuer can separate the function of the contract
from the price risk of the currency in which it’s denominated.

While a single stable-value currency would be helpful, a thriving cryptoeconomy is best-served by
a family of stable-value currencies, much as it is well-served by the family of variable-value crypto-
assets that we have today. Certainly a cryptocurrency pegged to the US Dollar has several uses, from
social payments in the US, to user-initiated dollarization in hyper-inflationary markets, to the efficient
settlement of high-frequency crypto-asset trades. At the same time, a cryptocurrency pegged to the
Euro would also be useful for many purposes, as would a cryptocurrency pegged to the price of a
basket of goods in Greece, as would a cryptocurrency pegged to the price of a barrel of oil, or housing
in San Francisco. Stable-value local, regional, and utility currencies allow people to hedge price risk in
their lives by denominating a portion of their personal economy in currencies that are stable vis-a-vis
the price of the goods they regularly use.

3.1 Elastic Coin Supply and Shifting Volatility Risk

Several protocols have been proposed for a decentralized stabilized value cryptocurrency (for exam-
ple [17, 2, 1, 19]). While a full review of these proposals is outside of the scope of this paper, they
generally share two properties. First, rather than a deterministic coin supply rule (in which the coin
supply and growth rate are determined in advance, independent of exogenous information), they each
introduce an elastic coin supply rule, that stabilizes the value of the coin by adjusting the supply of
the coin to match the demand. Second, they each introduce a multi-asset ecology, in which one coin
is intended to be stable, while one or more complementary crypto-assets bear the risk of a decrease in
stablecoin demand (and receives a reward in the case of an increase in stablecoin demand). In essence,
they each shift volatility risk from the coin holders to the complementary asset holders.

The Celo protocol utilizes the same two key intuitions, with five novel features: (a) it introduces
a multi-asset tiered reserve that supports several local and regional stable value currencies, (b) it sets
expansion and contraction parameters that are tuned to the reserve ratio defined by the tiered reserve,
(c) it introduces a decentralized exchange in which the different local and regional currencies and the
reserve currency can be traded amongst one another without a central party, and that the protocol
can use to perform expansions and contractions, (d) it releases block rewards and other incentives in
the reserve currency, and (e) it has a governance mechanism in which long-term stakeholders in the
reserve currency are responsible for governing the assets held in reserve and the new local currencies
that are introduced.

3.2. Protocol Summary

At a high level, the protocol proceeds as follows:

1. The protocol establishes a fixed supply of assets, called Celo (also referred to as the Celo native
asset), a portion of which is distributed over time. From the initial asset distribution, a portion
is placed in reserve and diversified.

2. The protocol also establishes a means-of-payment currency, called the Celo Dollar, that is in-
tended to be pegged roughly to the US Dollar, that adheres to the following elastic coin supply
rule:

When coin supply needs to expand (when the price of Celo Dollar is above the peg), the protocol
creates new coins, as in [17, 1, 2]. But rather than distributing them to token holders, it uses
them to purchase a basket of cryptocurrencies* at market rates through a smart contract. These
purchases get added to the reserves. This is analogous to a central bank expanding the money
supply by buying financial assets on the open market and depositing them in the reserves.

When the coin supply needs to contract, the protocol uses reserve assets to buy Celo Dollars on
the open market. This is analogous to a central bank selling financial assets on the open market
in order to contract the money supply.

~

The protocol has a variable rate transfer fee on Celo’s native asset, to encourage long-term
holding of the reserve currency. The proceeds from the fee goes to bolster the reserves, and the
rate is based on the reserve ratio — the lower the reserve ratio, the higher the transfer fee.

4. The protocol uses a proof-of-stake model for governance. The weight of a node in governance
decisions is dependent on the amount of Celo they stake®

5. Every time a block reward is distributed, an equivalent portion of Celo is released. If the reserve
ratio is substantially higher than the target reserve ratio, then the released amount is largely
allocated for incentives (e.g. to developers and users). If the reserve ratio is substantially lower
than the target reserve ratio, the released amount goes mostly to towards bolstering the reserves.

An analysis of the stability characteristics of this protocol is given in [7].

3.3 Shared Reserves

While a single stable coin would be useful for several purposes (for example in cryptoasset trading
and internet commerce), a more robust ecosystem would involve a family of local, regional, and utility
stable value coins. The benefits of such a monetary ecology has been discussed broadly, for example
in [9, 16, 15], but here we focus on one: a stable currency is only meaningful if it is stable vis-a-vis the
price of goods and services that are purchased using that currency. Using a global currency for local
transactions would introduce price volatility in regions where regional consumer price dynamics vary
from the global consumer price dynamics®.

From a protocol perspective, we are interested in two mechanisms here: (a) a governance scheme
that determines how the protocol makes decisions on introducing new regional stable coins, and (b) a
structure in which the introduction of a new successful stable coin increases the stability characteristics
of the coins in the family.

As a starting point, we can imagine a protocol where each new stable coin is independent — there
is a blockchain and reserve for each new currency introduced. In this scheme, the governance question
is straightforward — teams will independently choose to introduce new stable value coins outside of the
protocol, and people can choose independently to purchase the new coins and their complementary
reserve assets. Governance on this issue is determined outside of the protocol, by the market.

However, this simplicity comes at a cost: the introduction of a new successful stable coin has no
stabilizing effect on existing stable currencies, and on the margins it has a small destabilizing effect ’.

To address this issue, we introduce the idea of shared reserves. When the protocol introduces a
new stable value coin — for example, a stablecoin pegged to the Euro — the reserves for that coin are
the same reserves for Celo Dollars. When the supply of Celo Euros needs to expand, it expands using
the same mechanism as with Celo Dollars — the protocol creates new Celo Euros, and uses those to
purchase a basket of crypto assets for its reserves. When the supply of Celo Euros needs to contract,
the protocol uses the same mechanism as before: it sells reserve assets in exchange for Celo Euros and
retires the Celo Euros.

Initially, the Celo native asset, and longer-term through a basket of cryptoassets via cross-chain decentralized
exchanges once available

5future versions of the protocol could be based on amount at stake and length of time remaining in their stake.

®For example, with Greece and the Euro, or with dollarization in Uruguay

7If the demand for the new stable coin is high enough, it could potentially cause a contraction in demand for
existing stable coins, reducing the value associated with the complementary assets of those existing coins, and increasing
uncertainty around long-term demand of the existing coins.
The protocol can make this process more efficient in the following manner: before selling the
reserves, it first looks to see if the supply of Celo Dollars needs to expand. If so, it creates Celo
Dollars, exchanges them directly for Celo Euros at the prevailing exchange rate, and retires the Celo
Euros. This is functionally equivalent to selling reserves in exchange for Celo Euros, retiring the Celo
Euros, and then buying reserves in exchange for Celo Dollars; it just disintermediates the reserves. It
only uses the reserves directly if the need for contraction of the Celo Euros is greater than the need
for expansion of all the other stablecoins supported by the protocol.

A shared reserve system must come together with a thoughtful method of governing decisions on

what new stable coins to introduce, and when to introduce them. If a new stablecoin is introduced
hat has negative utility to the ecosystem, it can have a marginal negative impact on the stability of
he other currencies if the demand for that currency is high enough and volatile enough (for example,
a celebrity vanity stablecoin early on), or if the coin decreases aggregate demand for other coins
supported by the protocol (for example, the introduction of several duplicative regional currencies in
he same region with no differentiating features, causing confusion). For this reason, it is useful to
have a governance model that introduces a new stablecoin only if there is a widespread expectation
hat its introduction would increase the aggregate demand for the family of coins over the long run.
We describe this governance model in Section 4.4.2.
It is useful to note that the shared reserve system does not require all new currencies to use the
shared reserve. In fact, for local or functional currencies, there are several reasons why it would be
useful to not engage in the shared-reserve model; we discuss these in Section 4.4.4. To support these
currencies, we also allow for new stabilized assets to be created with their own reserve; we call this
partitioned reserves. At a high level, the mechanism works in the same manner as the single stabilized
asset case, except that a third party can create the asset and initiate the reserve for that asset. For the
partitioned-reserve case, each reserve allocation is initialized at 25% Celo, 25% a local reserve currency,
and the remainder the same allocations as the shared reserve.

3.4 Price Discovery and Mechanics of Reserve Asset Purchasing

The Celo protocol is implemented as a fork of Ethereum. The cost of computation in the Celo network
is paid in Celo, just as Ether is used to pay for gas on the Ethereum network. Celo stable assets
are implemented as the equivalent of ERC20 tokens. One difference between the Celo protocol and
Ethereum is that while Ether itself is not compliant with the ERC20 token standard, Celo is. This
allows a decentralized exchange, through smart contracts, between Celo stable value assets as well as
Celo native asset, much like Ox [21]. This allows the automatic purchasing of reserves and distribution
of coins without cross-chain decentralized exchanges.

To determine the price of Celo stable currencies, the protocol will use a Schelling-point scheme
amongst stakeholders, with the weight of the a stakeholder’s vote dependent on the amount of Celo at
stake. One can imagine further augmenting the Schelling point scheme with price feeds from exchanges,
as determined through a governance scheme.

4 Governance and Incentives

A primary incentive mechanism in the Celo protocol is the distribution of block rewards, which are
allocated to the various contributors to the system — those who maintain the protocol (by selecting
validators, validating transactions, verifying users, and participating in the Schelling-point price dis-
covery mechanism), those who contribute to the robustness of the reserves, those who take on risk in
the case that there is a contraction, those who use the protocol as their means of payment, those who
invite others to use the protocol, and those who improve the protocol (by participating in governance,
and by making technical contributions to the protocol). We describe these below.

4.1 Maintaining the System

The system uses a proof-of-stake mechanism for selecting the validator set and participating in gover-
nance decisions. Both validator election and governance decisions are made through a bonded-stake

10
weighted voting scheme. Any Celo holder may put up a bonded deposit, which involves locking Celo
in a smart contract. Votes (for both validators and in governance) are weighted by the amount of Celo
in the bonded deposit. Any locked Celo should continue to be locked up for a certain time period after
voting, and in the future it would be helpful to weight voting by the length of time remaining in the
lockup. This incentivizes long-term holding of the reserve currency and aligns governance decisions
with long-term perspectives. Block rewards are distributed amongst those who participate in validator
elections and governance decisions.
Users don’t vote for validators directly. Instead, validators are expected to organize themselves into
groups and account holders vote for these validator groups. Just as anybody in a democracy can create
their own political party, or seek to get selected to represent a party in an election, any Celo user can
create a validator group and add themselves to it, or ask an existing validator group to include them.

Validator elections are held once every epoch, which corresponds to approximately once per day.
Validators, once elected, put up a slashable bonded deposit, participate in the consensus scheme,
send verification messages, participate in the Schelling-point scheme for price discovery, and receive
block rewards to cover their costs and as an incentive for their work to maintain the system.

4.2 Bolstering Reserves and Contracting Stable-Value Currency Supply
when Needed

Celo holders, through their purchase, give the initial value to Celo’s native asset and introduce other
crypto assets into the reserves. Further, Celo holders bear some risk in the case of contracting supply
or a dip in the reserves: transfer fees are imposed if the reserve ratio goes below the target reserve
ratio, and the value of Celo may go down if there is a contraction in demand for Celo stable currencies.
Celo holders may be rewarded for playing these roles in two ways: first, as there is greater demand for
Celo stable currencies, there will be more protocol-directed purchases of Celo, increasing the demand
for fixed supply. Second, if the reserve ratio is greater than the target reserve ratio, Celo holders
are rewarded with a portion of the block rewards (provided that they are participating in consensus
on transaction validation, sending verification messages when selected, and participating in Schelling-

point voting for price discovery). These rewards are paid in proportion to the amount of Celo at stake
8

4.3 Increasing User Base and Usage of the System

Active users (people who use the payments protocol, participate in phone number validation through
the mobile wallet, and maintain a nominal stake in Celo) are rewarded through block rewards. In
effect, this reduces transaction fees for active users. (One can even imagine a scenario in which these
block rewards are issued by waiving transaction fees for a certain number of transactions in the stable
currency per unit time, implemented through part of the block reward going to paying transaction fees
of users, set at a rate to ensure a certain transaction speed, and prioritized based on the amount of
their stake.)

4.4 Improving the Protocol

And finally a continuously evolving protocol requires incentives, and a governance scheme, for improv-
ing the protocol.

4.4.1 Technical Improvements

For technical improvements to the protocol, anybody may put up a bonded deposit to make a technical
proposal, with a proposed fee-for-implementation, on a regular cycle®. Proposals will be voted on by
long-term stakeholders, similar to the voting scheme with Dash’s masternodes [8], with their votes
weighted by the amount of their stake and notice period. Funds that are not allocated in a particular
cycle are added to the reserves.

8and in future versions of the protocol, the time remaining in the stake
°This mechanism can also be applied to other types of proposals, for example for marketing proposals.

11
4.4.2 Introducing Regional Currencies and Broadening the Reserve Base

Over time, it would also improve the protocol to introduce more stable value currencies, and to broaden
he reserve holdings. If new stable value currencies are introduced appropriately, they can increase the
usefulness of the protocol, increase long-term growth in coin demand, and reduce aggregate demand
volatility. And if new crypto-assets are chosen appropriately, they can decrease reserve volatility. Both
of these have the effect of further stabilizing the coins supported by the protocol. The governance
rocedure for introducing these is similar to the governance around technical improvement.

At regular intervals, any Celo holder may stake a certain amount of Celo to make a proposal
on introducing a new stable value currency (by specifying a peg). Long-term Celo holders vote in
roportion to the amount of Celo they own!®. If a certain vote threshold is passed, a new stablecoin
is introduced on the shared reserve.
Similarly, any Celo holder may stake a certain amount of Celo to make a proposal on introducing
a new crypto asset to the reserves (by specifying a suggested percentage of future reserve purchases to
e allocated to that asset). Long-term Celo holders vote in proportion to the amount of Celo they have
at stake!!. If a certain vote threshold is passed, then future purchases for the reserves will include the
new crypto-asset with an allocation given by the median percentage of all votes (with the allocation
of all other assets being diluted pro-rata).
The criteria by which these proposals should be evaluated is the extent to which they would increase
in the long-term stability of the stable currencies. Introductions of crypto-assets to the reserves that
increase the expected appreciation of reserves and decrease the volatility of the reserves would have
positive benefits to the long-term coin stability. Introductions of new stable-value coins that increase
long-term aggregate coin demand and decrease the possibility of an aggregate crash in coin demand
also increase the stability characteristics of the coin.

4.4.3 Futarchical Governance

It is possible that in the future, we introduce prediction markets as a supplemental form of governance
— where prediction markets will also weigh in on whether a change in the composition of the reserves
or the composition of stablecoin portfolio would increase or decrease long-term coin stability. It is
even possible to have the prediction markets serve directly as the voting mechanism, in a futarchical
governance paradigm [11]. This is a direction for future work.

4.4.4 Partitioned Reserves

The introduction of a new local currency does not need to go through the governance process if it is
not backed by the shared reserve. One can introduce a new local currency backed by its own reserve,
with its own affiliated local reserve currency. In these cases, the default reserve would include in its
reserve a basket of diversified crypto assets that can include Celo, the local reserve currency, Celo
Dollars, and others.

Doing so opens many possibilities. First, these local protocols may choose to distribute some of the
local reserve currency to all local inhabitants, effectively creating a social dividend that allows local
residents to benefit from the increased adoption of a local currency.
These local protocols may also choose to implement the transfer fee in a different way; rather than
having the transfer fee payable in the local reserve currency when the reserve ratio is low, they may
choose to bolster the reserves by issuing the fee directly on the local stable currency, at regular intervals
rather than just when the reserve ratio is lower than the target reserve ratio. This implementation of
demurrage has the effect of bolstering the reserves and encouraging circulation of the local means-of-
ayment currency, at the expense of giving people a moderate incentive to switch out of the currency
when possible. Despite this drawback, the literature on demurrage (see, for example, [9, 15]) suggests
hat more experiments with demurrage are useful.

And finally, as more assets get tokenized in the future, the partitioned reserve mechanism allows
for the reserves to include real assets. This is helpful from a stability perspective, and also allows for

10and in future versions of the protocol, the amount of time remaining in their stake
land in future versions of the protocol, the amount of time in their notice period

12
natural-capital-backed means-of-payment currencies (for example, currencies backed by forestland),

where the growth in demand for those currencies will increase the amount of natural capital backing
them. For a detailed discussion of natural-capital-backed currencies, see [9].

5

Conclusion

We have introduced a protocol for social payments, called the Celo protocol. The Celo protocol com-
bines an address-based encryption protocol that allows a sender to use a phone number or email address
directly as a public key, with a reserve-backed stabilization protocol to minimize volatility through an

elastic supply rule. Together, these allow for a more seamless experience using cryptocurrencies as a
means of payment. Further, they enable a monetary ecology that includes local and regional currencies,
social dividends, demurrage-charged currencies, and in the future, natural-capital-backed currencies.

References

1

Cw NN aS we

Nader Al-Naji, Josh Chen, and Lawrence Diao. Basis: A price-stable cryptocurrency with an
algorithmic central bank. 2017.

Ferdinando M Ametrano. Hayek money: The cryptocurrency price stability solution. 2016.

Eli Ben Sasson et al. Scalable, transparent, and post-quantum secure computational integrity.

2017.

Dan Boneh and Matt Franklin. Identity-based encryption from the weil pairing. In Advances in
Cryptology—CRYPTO 2001, pages 213-229. Springer, 2001.

Benedikt Bunz et al. Bulletproofs: Efficient range proofs for confidential transactions. 2017.
Sanjit Chaterjee and Palash Sarkar. Identity-Based Encryption. Springer, 2011.

Roman Croessman et al. An analysis of the stability characteristics of Celo. 2018.

Evan Duffield and Daniel Diaz. Dash: A privacy-centric crypto-currency, 2014.

Charles Eisenstein. Sacred economics: Money, gift, and society in the age of transition. North
Atlantic Books, 2011.

Shafi Goldwasser, Silvio Micali, and Charles Rackoff. Non-interactive zero-knowledge proof of
knowledge and chosen ciphertext attack. 18:186-208, 1989.

Robin Hanson. Futarchy: Vote values, but bet beliefs. 2000.

Daira Hopwood, Sean Bowe, Taylor Hornby, and Nathan Wilcox. Zcash protocol specification,
version 2018.0-beta-20. 2018.

Sepandar Kamvar. Numerical Algorithms for Personalized Search in Self-Organizing Information
Networks. Princeton University Press, 2009.

Sepandar Kamvar, Mario Schlosser, and Hector Garcia-Molina. The eigentrust algorithm for rep-
utation management in peer-to-peer network. In Proceedings of the 12th international conference

on World Wide Web. ACM. ACM, 2003.

Bernard A Lietaer. Mysterium Geld: Emotionale Bedeutung und Wirkungsweise eines Tabus.
Riemann, 2000.

Bernard A Lietaer. The future of money: A new way to create wealth, work and a wiser world.
Century, 2001.
17

18

19
20
21

Working paper, 2015.

ages 47-53. Springer, 1984.

lockchain, 2017.

Robert Sams. A note on cryptocurrency stabilisation: Seigniorage shares.

Maker Team. The dai stablecoin system. 2017.
Lloyd Trefethen and David Bau. Numerical Linear Algebra. SIAM, 1997.

14

Technical report,

Adi Shamir et al. Identity-based cryptosystems and signature schemes. In Crypto, volume 84,

Will Warren and Amir Bandeali. 0x: An open protocol for decentralized exchange on the ethereum
